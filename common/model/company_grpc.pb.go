// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: company.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CompanyServices_CreateCompany_FullMethodName = "/model.CompanyServices/CreateCompany"
	CompanyServices_GetAll_FullMethodName        = "/model.CompanyServices/GetAll"
)

// CompanyServicesClient is the client API for CompanyServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyServicesClient interface {
	CreateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Company, error)
	GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCompany, error)
}

type companyServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyServicesClient(cc grpc.ClientConnInterface) CompanyServicesClient {
	return &companyServicesClient{cc}
}

func (c *companyServicesClient) CreateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, CompanyServices_CreateCompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServicesClient) GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCompany, error) {
	out := new(ListCompany)
	err := c.cc.Invoke(ctx, CompanyServices_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServicesServer is the server API for CompanyServices service.
// All implementations must embed UnimplementedCompanyServicesServer
// for forward compatibility
type CompanyServicesServer interface {
	CreateCompany(context.Context, *Company) (*Company, error)
	GetAll(context.Context, *emptypb.Empty) (*ListCompany, error)
	mustEmbedUnimplementedCompanyServicesServer()
}

// UnimplementedCompanyServicesServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyServicesServer struct {
}

func (UnimplementedCompanyServicesServer) CreateCompany(context.Context, *Company) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompany not implemented")
}
func (UnimplementedCompanyServicesServer) GetAll(context.Context, *emptypb.Empty) (*ListCompany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedCompanyServicesServer) mustEmbedUnimplementedCompanyServicesServer() {}

// UnsafeCompanyServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyServicesServer will
// result in compilation errors.
type UnsafeCompanyServicesServer interface {
	mustEmbedUnimplementedCompanyServicesServer()
}

func RegisterCompanyServicesServer(s grpc.ServiceRegistrar, srv CompanyServicesServer) {
	s.RegisterService(&CompanyServices_ServiceDesc, srv)
}

func _CompanyServices_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServicesServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyServices_CreateCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServicesServer).CreateCompany(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyServices_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServicesServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyServices_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServicesServer).GetAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyServices_ServiceDesc is the grpc.ServiceDesc for CompanyServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.CompanyServices",
	HandlerType: (*CompanyServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCompany",
			Handler:    _CompanyServices_CreateCompany_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _CompanyServices_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company.proto",
}
